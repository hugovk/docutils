#!/usr/bin/env python3

# $Id$
# Author: Lea Wiemann <LeWiemann@gmail.com>
# Copyright: This module has been placed in the public domain.

"""
Test for docutils XML writer.

.. Attention::
   While the tests compare the output on the string-level, no guarantee
   is given against changes to identical XML representations like
   ``<empty></empty>`` vs. ``<empty/>``. The sample strings in this test
   module mirrors the current behaviour of the docutils_xml writer.
"""

from io import StringIO
import unittest

import docutils
import docutils.core
import docutils.utils

# sample strings
# --------------

source = """\
Test

----------

Test. \xe4\xf6\xfc\u20ac"""

xmldecl = """<?xml version="1.0" encoding="iso-8859-1"?>
"""

doctypedecl = """\
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net\
//DTD Docutils Generic//EN//XML"\
 "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
"""

generatedby = '<!-- Generated by Docutils %s -->\n' % docutils.__version__

bodynormal = """\
<document source="&lt;string&gt;"><paragraph>Test</paragraph>\
<transition></transition><paragraph>Test. \xe4\xf6\xfc&#8364;</paragraph>\
</document>"""

bodynewlines = """\
<document source="&lt;string&gt;">
<paragraph>Test</paragraph>
<transition></transition>
<paragraph>Test. \xe4\xf6\xfc&#8364;</paragraph>
</document>
"""

bodyindents = """\
<document source="&lt;string&gt;">
    <paragraph>Test</paragraph>
    <transition></transition>
    <paragraph>Test. \xe4\xf6\xfc&#8364;</paragraph>
</document>
"""

# raw XML
# """""""

raw_xml_source = """\
.. raw:: xml

   <root>
    <child>Test \xe4\xf6\xfc\u20ac</child>
    &gt;
    &lt;

   </root>

.. role:: xml(raw)
   :format: xml

:xml:`<test>inline raw XML</test>`.
"""

raw_xml = """\
<document source="&lt;string&gt;">
<raw format="xml" xml:space="preserve"><root>
 <child>Test \xe4\xf6\xfc&#8364;</child>
 &gt;
 &lt;

</root></raw>
<paragraph><raw classes="xml" format="xml" xml:space="preserve">\
<test>inline raw XML</test></raw>.</paragraph>
</document>
"""

invalid_raw_xml_source = """\
.. raw:: xml

   <root>
    <child>Test \xe4\xf6\xfc\u20ac</child>
   </mismatch>

.. role:: xml(raw)
   :format: xml

:xml:`<test>inline raw XML&lt;/test>`.
"""

invalid_raw_xml = """\
<document source="&lt;string&gt;">
<raw format="xml" xml:space="preserve"><root>
 <child>Test \xe4\xf6\xfc\u20ac</child>
</mismatch></raw>
<paragraph><raw classes="xml" format="xml" xml:space="preserve">\
<test>inline raw XML&lt;/test></raw>.</paragraph>
</document>
"""


def publish_xml(settings, source):
    return docutils.core.publish_string(
        source=source, reader_name='standalone', writer_name='docutils_xml',
        settings_overrides={
            'input_encoding': 'utf8',
            'output_encoding': 'iso-8859-1',
            '_disable_config': True,
            'xml_declaration': False,
            'doctype_declaration': False,
            **settings
        }
    )


# XML Test Case
# -------------
class TestDocutilsXML(unittest.TestCase):
    def test_publish(self):
        settings = {'indents': False,
                    'newlines': False}
        for xml_declaration in True, False:
            for doctype_declaration in True, False:
                with self.subTest(xml_declaration=xml_declaration,
                                  doctype_declaration=doctype_declaration):
                    expected = ''
                    if xml_declaration:
                        expected += xmldecl
                    if doctype_declaration:
                        expected += doctypedecl
                    expected += generatedby
                    expected += bodynormal
                    settings['xml_declaration'] = xml_declaration
                    settings['doctype_declaration'] = doctype_declaration
                    result = publish_xml(settings, source)
                    self.assertEqual(result, expected.encode('latin1'))

    def test_publish_indents(self):
        settings = {'indents': True,
                    'newlines': True}
        result = publish_xml(settings, source)
        expected = generatedby + bodyindents
        self.assertEqual(result, expected.encode('latin1'))

    def test_publish_newlines(self):
        settings = {'indents': False,
                    'newlines': True}
        result = publish_xml(settings, source)
        expected = generatedby + bodynewlines
        self.assertEqual(result, expected.encode('latin1'))

    def test_raw_xml(self):
        settings = {'indents': False,
                    'newlines': True}
        result = publish_xml(settings, raw_xml_source)
        expected = generatedby + raw_xml
        self.assertEqual(result, expected.encode('latin1', 'xmlcharrefreplace'))

    def test_invalid_raw_xml(self):
        warnings = StringIO()
        settings = {'indents': False,
                    'newlines': True,
                    'warning_stream': warnings}
        result = publish_xml(settings, invalid_raw_xml_source)
        expected = generatedby + invalid_raw_xml
        self.assertEqual(result, expected.encode('latin1', 'xmlcharrefreplace'))
        warnings.seek(0)
        self.assertEqual(
            warnings.readlines(),
            ['<string>:5: '
             '(WARNING/2) Invalid raw XML in column 2, line offset 3:\n',
             '<root>\n',
             ' <child>Test \xe4\xf6\xfc\u20ac</child>\n',
             '</mismatch>\n',
             '<string>:10: '
             '(WARNING/2) Invalid raw XML in column 30, line offset 1:\n',
             '<test>inline raw XML&lt;/test>\n'])
        settings['halt_level'] = 2  # convert info messages to exceptions
        settings['warning_stream'] = False
        with self.assertRaises(docutils.utils.SystemMessage):
            publish_xml(settings, invalid_raw_xml_source)


if __name__ == '__main__':
    unittest.main()
